# Primary manifest data file used to build out the given cluster.
# In on-premise, these values are given to us and we create this file.
# Any platform specific items that may be needed will be added to this common manifest


kind: datafile
version: 1.0.1

# This will apply to a VPN like environment or an air-gapped like environment
bastian:
  enable: False
  # This host will be set ONLY for environments where a bastian host is supplied to us
  host: 

build:
  version: &version 1.0.1
  # Type of build environment
  environment: &env development
  # Name of the given release. Version will be appended
  release: &release epiphany-metal
  # If repo_root is true then add that as a prefix for the output
  repo_root: True
  # Should only be on of these: azure, aws, metal, vbox, vmware
  platform: metal
  output: /build/$PLATFORM/infrastructure/epiphany

ansible_tags:
  - key: environment
    value: development
  - key: version
    value: 1.0.1
  - key: release
    value: epiphany-lab
  - key: resourceType
    value: epiphany-lab-builds

# The primary 'operations' user and the ssh key path
admin_user:
  name: operations
  key_path: ~/.ssh/epiphany-key/id_rsa

# This is the master set of available roles
ansible_roles:
  - master
  - worker
  - kafka
  - zookeeper
  - grafana    
  - node_exporter
  - prometheus
  - elasticsearch
  - elasticsearch-curator
  - kibana
  - filebeat
  - jmx-exporter
  - kafka-exporter
  - haproxy_tls_termination
  - haproxy_exporter
  - reboot
  # These last two must always be present
  - linux
  # - windows

domain:
  enable: False
  name: example.com

# Nodes in the cluster along with metadata and the groups they belong to
nodes:
  - name: k8s-master
    # Mainly used for Azure because Terraform is being used and has the ability to use count!
    count: 1
    # If enabled then the first host in a 'count' pattern will be used which will end with '-001'
    bastian_host: False
    # Represents if there are public IPs. If not then a VPN connection is assumed.
    # `public` could also mean exposed to a larger network in the case of on-premise with metal or vmware
    public_ips: True
    # The roles that this given node belongs to
    ansible_roles:
      - linux
      - master
      - node_exporter
      - filebeat
      - prometheus
      - grafana
      - elasticsearch 
      - elasticsearch-curator
      - kibana
      - haproxy_tls_termination
      - reboot

    security:
      firewall:
        enable: false
        ports:

    # hosts the individual host names and IPs based on count above
    hosts:
      - name: epiphany-lab1
        # May want to address multiple nics and bonding options later
        ips:
          # Only takes the first public ip
          public: 192.168.1.4
          private: 192.168.1.4

  - name: k8s-worker1
    # Mainly used for Azure because Terraform is being used and has the ability to use count!
    count: 1
    # If enabled then the first host in a 'count' pattern will be used which will end with '-001'
    bastian_host: False
    # Represents if there are public IPs. If not then a VPN connection is assumed.
    # `public` could also mean exposed to a larger network in the case of on-premise with metal or vmware
    public_ips: True
    # The roles that this given node belongs to
    ansible_roles:
      - linux
      - worker
      - node_exporter
      - filebeat
      - reboot

    security:
      firewall:
        enable: false
        ports:

    # hosts the individual host names and IPs based on count above
    hosts:
      - name: epiphany-lab2
        # May want to address multiple nics and bonding options later
        ips:
          # Only takes the first public ip
          public: 192.168.1.15
          private: 192.168.1.15

  - name: k8s-worker2
    # Mainly used for Azure because Terraform is being used and has the ability to use count!
    count: 1
    # If enabled then the first host in a 'count' pattern will be used which will end with '-001'
    bastian_host: False
    # Represents if there are public IPs. If not then a VPN connection is assumed.
    # `public` could also mean exposed to a larger network in the case of on-premise with metal or vmware
    public_ips: True
    # The roles that this given node belongs to
    ansible_roles:
      - linux
      - worker
      - node_exporter
      - filebeat
      - reboot
    security:
      firewall:
        enable: false
        ports:

    # hosts the individual host names and IPs based on count above
    hosts:
      - name: epiphany-lab3
        # May want to address multiple nics and bonding options later
        ips:
          # Only takes the first public ip
          public: 192.168.1.31
          private: 192.168.1.31

  - name: monitoring
    # Mainly used for Azure because Terraform is being used and has the ability to use count!
    count: 1
    # If enabled then the first host in a 'count' pattern will be used which will end with '-001'
    bastian_host: False
    # Represents if there are public IPs. If not then a VPN connection is assumed.
    # `public` could also mean exposed to a larger network in the case of on-premise with metal or vmware
    public_ips: True
    # The roles that this given node belongs to
    ansible_roles:
      - linux
      - node_exporter
      - filebeat
      - prometheus
      - grafana
      - reboot

    security:
      firewall:
        enable: false
        ports:

    # hosts the individual host names and IPs based on count above
    hosts:
      - name: epiphany-lab4
        # May want to address multiple nics and bonding options later
        ips:
          # Only takes the first public ip
          public: 192.168.1.6
          private: 192.168.1.6

  - name: centralized-log
    # Mainly used for Azure because Terraform is being used and has the ability to use count!
    count: 1
    # If enabled then the first host in a 'count' pattern will be used which will end with '-001'
    bastian_host: False
    # Represents if there are public IPs. If not then a VPN connection is assumed.
    # `public` could also mean exposed to a larger network in the case of on-premise with metal or vmware
    public_ips: True
    # The roles that this given node belongs to
    ansible_roles:
      - linux
      - node_exporter
      - filebeat
      - elasticsearch 
      - elasticsearch-curator
      - kibana
      - reboot

    security:
      firewall:
        enable: false
        ports:

    # hosts the individual host names and IPs based on count above
    hosts:
      - name: epiphany-lab5
        # May want to address multiple nics and bonding options later
        ips:
          # Only takes the first public ip
          public: 192.168.1.7
          private: 192.168.1.7

  - name: kafka1
    # Mainly used for Azure because Terraform is being used and has the ability to use count!
    count: 1
    # If enabled then the first host in a 'count' pattern will be used which will end with '-001'
    bastian_host: False
    # Represents if there are public IPs. If not then a VPN connection is assumed.
    # `public` could also mean exposed to a larger network in the case of on-premise with metal or vmware
    public_ips: True
    # The roles that this given node belongs to
    ansible_roles:
      - linux
      - kafka
      - zookeeper
      - jmx-exporter
      - node_exporter
      - kafka-exporter
      - filebeat
      - reboot

    security:
      firewall:
        enable: false
        ports:

    # hosts the individual host names and IPs based on count above
    hosts:
      - name: epiphany-lab6
        # May want to address multiple nics and bonding options later
        ips:
          # Only takes the first public ip
          public: 192.168.1.32
          private: 192.168.1.32

  - name: kafka2
    # Mainly used for Azure because Terraform is being used and has the ability to use count!
    count: 1
    # If enabled then the first host in a 'count' pattern will be used which will end with '-001'
    bastian_host: False
    # Represents if there are public IPs. If not then a VPN connection is assumed.
    # `public` could also mean exposed to a larger network in the case of on-premise with metal or vmware
    public_ips: True
    # The roles that this given node belongs to
    ansible_roles:
      - linux
      - kafka
      - zookeeper
      - jmx-exporter
      - node_exporter
      - kafka-exporter
      - filebeat
      - reboot
      #- reboot

    security:
      firewall:
        enable: false
        ports:

    # hosts the individual host names and IPs based on count above
    hosts:
      - name: epiphany-lab7
        # May want to address multiple nics and bonding options later
        ips:
          # Only takes the first public ip
          public: 192.168.1.63
          private: 192.168.1.63

  - name: load-balancer
    # Mainly used for Azure because Terraform is being used and has the ability to use count!
    count: 1
    # If enabled then the first host in a 'count' pattern will be used which will end with '-001'
    bastian_host: False
    # Represents if there are public IPs. If not then a VPN connection is assumed.
    # `public` could also mean exposed to a larger network in the case of on-premise with metal or vmware
    public_ips: True
    # The roles that this given node belongs to
    ansible_roles:
      - linux
      - haproxy_tls_termination
      - haproxy_exporter
      - node_exporter
      - reboot
      #- reboot

    security:
      firewall:
        enable: false
        ports:

    # hosts the individual host names and IPs based on count above
    hosts:
      - name: epiphany-lab8
        # May want to address multiple nics and bonding options later
        ips:
          # Only takes the first public ip
          public: 192.168.1.66
          private: 192.168.1.66

kubernetes:
  version: 1.13.0
  storage:
    enable: False

haproxy:
  stats:
    enable: true
    user: operations
    password: your-stats-pwd
  frontend:
    - name: https_front
      port: 443
      https: yes
      backend:
      - http_back1
  backend:
    - name: http_back1
      server_groups:
      - worker
      #servers:
      # Definition for server to that hosts the application.
      #- name: "node1"
      #  address: "epiphany-lab1.domain.com"
      port: 30001

monitoring:
  alerts:
    enable: False # required value
    handlers:
      mail:
        enable: False # required value
        smtp_from: "alert@test.com"
        smtp_host: "smtp-url:smtp-port"
        smtp_auth_username: "your-smtp-user@domain.com"
        smtp_auth_password: "your-smtp-password"
        smtp_require_tls: True
        recipients: 
        - recipient1@domain.com
        - recipient2@domain.com
      slack:
        enable: False # required value
        api_url: url-to-slack-workspace-api.slack.com
      pagerduty:
        enable: False # required value
        service_key: your-service-key 
    rules:
    - name: "UpDown"
      expression: up == 0
      duration: 1m #1s, 1m, 1h, 1d, 1w, ...
      severity: critical
      message: "Node is down." 
    - name: "DiskSpace"
      expression: ((node_filesystem_avail_bytes* 100) / node_filesystem_size_bytes) < 20 # 100 - 80
      duration: 1m #1s, 1m, 1h, 1d, 1w, ...
      severity: critical
      message: "Disk usage is above 80%" 
    - name: "DiskSpacePrediction"
      expression: predict_linear(node_filesystem_free_bytes{job="node"}[1h], 48 * 3600) < 0
      duration: 1m #1s, 1m, 1h, 1d, 1w, ...
      severity: warning
      message: "Disk will run out of space in less than 48h" 
    - name: "MemoryUsage"
      expression: (sum by (instance) (node_memory_MemTotal_bytes) - sum by (instance)(node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) ) / sum by (instance)(node_memory_MemTotal_bytes) * 100 > 80
      duration: 15m #1s, 1m, 1h, 1d, 1w, ...
      severity: warning
      message: "Server memory has been used in more than 80% during last 15 minutes." 
    - name: "CpuLoad"
      expression: 100 - (avg by (instance) (irate(node_cpu_seconds_total{job="node",mode="idle"}[5m])) * 100) > 80
      duration: 15m #1s, 1m, 1h, 1d, 1w, ...
      severity: critical
      message: "CPU utilization has exceeded 80% over last 15 minutes." 
    - name: "KafkaConsumerLag"
      expression: sum by(consumergroup) (kafka_consumergroup_lag) > 1000
      duration: 15m #1s, 1m, 1h, 1d, 1w, ...
      severity: critical
      message: "Kafka consumers are lagging more than 1000 messages over last 15 minutes." 
        