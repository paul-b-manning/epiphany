#!/usr/bin/env python
#
# Author: Hans Chris Jones
# Copyright 2018, LambdaStack
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# NOTE: You need to pass in the full paths to the file references below. The data is file should be private and it's
# not in the project. The reason is you should create a YAML file that fits how you want to configure your
# environment. For eample, you can have a small YAML data file for configuring the kickstart/ISO process and then
# maybe one for building out the missing USER and/or SYSTEM data used in the CHEF Environment files. A sample
# environment file ships with the project for vagrant called vagrant.json. However, a production.json should
# really be a jinja2 template like base_environment.json.j2 with as much default data and with template {{ }} placeholders
# for the actual data. The output of this process should be the TRUE production.json file. Also, it's a good idea
# to name your production.json file more descriptive of the environment it actually belongs to. For example,
# prod-dc101.json or something like it.

from jinja2 import Environment, FileSystemLoader
# import jinja2.ext.loopcontrols
import traceback
import os
import yaml
import argparse
import sys
import json


# All three file paths must be full paths to each.
def render_template(data_file, in_file, out_file, json_arg, yaml_arg):
    dict = ""

    # If the -j flag was passed then convert the yaml to pretty json in sorted order
    if json_arg:
        with open(data_file) as data:
            dict =  yaml.load(data)
        print json.dumps(dict, indent=4, sort_keys=True)
        exit(0)

    if yaml_arg:
        with open(data_file) as data:
            dict =  json.load(data)
        print yaml.safe_dump(dict, indent=2, allow_unicode=True, default_flow_style=False)
        exit(0)

    # Start the template processing
    try:
        #env = Environment(autoescape=False, loader=FileSystemLoader('/')), trim_blocks=True)
        env = Environment(loader=FileSystemLoader('/'))
        env.filters['jsonify'] = json.dumps

        with open(data_file) as data:
            dict =  yaml.load(data, Loader=yaml.FullLoader)

        # Render template and print generated config to console
        template = env.get_template(in_file)

        with open(out_file, 'w') as f:
            output = template.render(dict)
            f.write(output)

    except Exception as e:
        # Print out error, traceback and debug info...
        print
        print '='*60
        print "Template Engine stopped due to the following error ===> ", e
        print '-'*60
        print 'Debugging Output:'
        print traceback.print_exc(file=sys.stdout)
        print '-'*60
        print 'Data dictionary:'
        print
        print json.dumps(dict, indent=4, sort_keys=True)
        print '='*60
        print "Template Engine stopped due to the following error ===> ", e
        print 'Scan up to see traceback and JSON data (traceback at both top and bottom of this output)'
        print '-'*60
        print 'Debugging Output:'
        print traceback.print_exc(file=sys.stdout)
        print '='*60
        print
        exit(1)


# Used to pass a string instead of input file as a template
# dict is json dictionary of the values to sub
def render_string(in_string, dict):
    return Environment().from_string(in_string).render(dict)


# Standard way of calling...
# ./template_engine -i <template file> -d <yaml file> -o <output file>

# Just to dump JSON data from yaml...
# ./template_engine -d <yaml file> -j
if __name__ == '__main__':
    p = argparse.ArgumentParser(description='Template Engine', prog='Template_Engine')
    p.add_argument('--input_file', '-i', help='The template input file.')
    p.add_argument('--output_file', '-o', help='The rendered output file.')
    p.add_argument('--data_file', '-d', help='The YAML data file.')
    p.add_argument('-j', action='store_true', help='Output the data dictionary as json.')
    p.add_argument('-y', action='store_true', help='Output the json to yaml.')

    options = p.parse_args()

    if options.j or options.y:
        # Will only produce a dump of the data to stdout
        if not options.data_file:
            p.print_help()
            sys.exit()
    else:
        if not options.input_file or not options.output_file or not options.data_file:
            p.print_help()
            sys.exit()

    render_template(options.data_file, options.input_file, options.output_file, options.j, options.y)
