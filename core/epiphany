#!/bin/bash
#
# Copyright 2019 ABB. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Creates the REPO_ROOT env var for everything else to use...
export REPO_ROOT=$(git rev-parse --show-toplevel)/core

# Exit immediately if anything goes wrong, instead of making things worse.
set -eu

# Colors
# Black        0;30     Dark Gray     1;30
# Red          0;31     Light Red     1;31
# Green        0;32     Light Green   1;32
# Brown/Orange 0;33     Yellow        1;33
# Blue         0;34     Light Blue    1;34
# Purple       0;35     Light Purple  1;35
# Cyan         0;36     Light Cyan    1;36
# Light Gray   0;37     White         1;37
# RED='\033[0;31m'
# YELLOW='\033[0;33m'
# GREEN='\033[0;32m'
# NC='\033[0m' # No Color

# Default values - Global ENV
export EPIPHANY_AUTO_APPROVE=0

# Default values - ENV variables exported but only in this shell do not have 'EPIPHANY_' prefix. Global ENV vars do.
export BOOTSTRAP_GET_PREREQS=0
export BOOTSTRAP_GET_PREREQS_ONLY=0
export BOOTSTRAP_INFRASTRUCUTURE=0
export BOOTSTRAP_INIT=0
export BOOTSTRAP_REMOVE_PREREQS=0
export BUILD_ENVIRONMENT=development
export BUILD_SETUP=0
export BUILD_SHOW_LOGO=1
export BUILD_SHOW_VERSION=0
export BUILD_UPDATE=1
export DATA=data.yaml
export DATA_SUBFOLDER=infrastructure/epiphany
export EPIPHANY_DATA_SUBFOLDER=epiphany
export LINUX_ENVIRONMENT=$(uname | tr '[:upper:]' '[:lower:]')
export PLATFORM=azure
export SHOW_HELP=0
export EPIPHANY_SIMPLE=0

export AWS_SCRIPTS_BASE=core/src/scripts/aws
export AWS_TEMPLATES_BASE=core/src/templates/aws
export AZURE_SCRIPTS_BASE=core/src/scripts/azure
export AZURE_TEMPLATES_BASE=core/src/templates/azure
export COMMON_SCRIPTS_BASE=core/src/scripts/common
export COMMON_TEMPLATES_BASE=core/src/templates/common
export ONPREM_SCRIPTS_BASE=core/src/scripts/on-prem
export ONPREM_TEMPLATES_BASE=core/src/templates/on-prem

# This will let it know that no options were passed in the cli
export NO_OPTS=1

# Have to source this in every script you wish to have color
source $REPO_ROOT/$COMMON_SCRIPTS_BASE/base_colors.sh
source $REPO_ROOT/$COMMON_SCRIPTS_BASE/functions.sh $REPO_ROOT/$COMMON_SCRIPTS_BASE

while getopts abcghirsxuve:f:d:l:p:o:t:z: opt; do
    case $opt in
        a)  # Auto approve to continue through all prompts automatically
            export EPIPHANY_AUTO_APPROVE=1
            export NO_OPTS=0
        ;;
        b)
            # (required) if you wish to build out Epiphany on a given cluster. (optional) if you
            # only want to build the underlying infrastructure: -i must be used instead.
            export BOOTSTRAP_INIT=1
            export NO_OPTS=0
        ;;
        c)
            # (optional) Use simplified data.yaml file to overwrite the original one.
            export EPIPHANY_SIMPLE=1
            export NO_OPTS=0
        ;;
        d)
            # (optional) NB: Use this option if you want to change the default 'base data path' - not the full path.
            # Used with -f for the subfolder directory and -p for platform (defaults to 'azure')
            export DATA_DIR=$OPTARG
            export NO_OPTS=0
            
            # NB: ./EPIPHANY_UP -d /myrepo/data
        ;;
        e)
            # (optional) NB: Use this option if you want to change the default environment from `development` to something
            # like `production`. MUST make sure this is the same as what is in the project manifest.yaml file (for now)!
            export BUILD_ENVIRONMENT=$OPTARG
            export NO_OPTS=0
            
            # NB: ./EPIPHANY_UP -e prod
        ;;
        f)
            # (optional) Change the default Folder from `infrastructure/epiphany` to something else. This
            # MUST match a folder in your data path. For example: -d /data/azure -f infrastructure/epiphany. It can be
            # used with -p to change the platform as well.
            export DATA_SUBFOLDER=$OPTARG
            export NO_OPTS=0
        ;;
        g)
            # (optional) -g to simply get the prerequisites and exit. Use it with (-r below) and it will remove the
            # prerequisites and download them again.
            export BOOTSTRAP_GET_PREREQS_ONLY=1
            export BOOTSTRAP_GET_PREREQS=1
            export NO_OPTS=0
        ;;
        h)
            # Show usage help.
            show_help
            exit 0
        ;;
        i)
            # (optional) -i to build out the infrastructure for the given $PLATFORM. If -b is also provided then it will
            # will build out the infrastructure and then lay Epiphany on it.
            export BOOTSTRAP_INFRASTRUCUTURE=1
            export BOOTSTRAP_GET_PREREQS=1
            export NO_OPTS=0
        ;;
        l)
            # (optional) Change the default Epiphany Data Folder from `epiphany` to something else. This
            # MUST match a folder in your data path. For example: -d /data/azure -f infrastructure/epiphany. It can be
            # used with -p to change the platform as well.
            export EPIPHANY_DATA_DIR=$OPTARG
            export NO_OPTS=0
        ;;
        o)
            # (optional) Output directory
            export OUTPUT_DIR=$OPTARG
            export NO_OPTS=0
        ;;
        p)
            # (optional) Change the default Platform from `azure` to something else like `aws` or `on-premise`. This
            # MUST match a folder in your data path. For example: /data/azure/infrastructure/epiphany
            # Valid options are: azure, aws, vmware, metal, vbox only
            export PLATFORM=$(echo $OPTARG | tr '[:upper:]' '[:lower:]')
            export NO_OPTS=0
        ;;
        r)
            # (optional) -r to remove the prerequisites. Cleaning up.
            # It does not exit like -g but is called before gathering prerequisites.
            # Use it with -g -r and it will clean up and gather updated prerequisites and exit based on versions in manifest.yaml
            export BOOTSTRAP_REMOVE_PREREQS=1
            export NO_OPTS=1
        ;;
        s)
            # (optional) NB: Use this option first to setup your platform environment
            export BUILD_SETUP=1
            export NO_OPTS=0
        ;;
        t)
            # (optional) template which will be used to generate data.yaml
            DATA_YAML_TEMPLATE_PATH=$OPTARG
            export NO_OPTS=0
        ;;
        u)
            # Update the cluster.
            export BUILD_UPDATE=0
            export NO_OPTS=0
        ;;
        v)
            # Show version.
            export BUILD_SHOW_VERSION=1
        ;;
        x)
            # (optional) Causes the logo portion *NOT* to show
            export BUILD_SHOW_LOGO=0
            export NO_OPTS=0
        ;;
        z)
            # Override the existing REPO_ROOT
            # If no argument then keep the existing one
            if [[ ! -z $OPTARG ]]; then
                export REPO_ROOT=$OPTARG
            fi
            export NO_OPTS=0
        ;;
    esac
done

# Create variables to be passed to scripts
export PLATFORM_FOLDER=${DATA_DIR:-"$(pwd)/data/$PLATFORM/"}
export DATA_DIR=${DATA_DIR:-"$(pwd)/data/$PLATFORM/$DATA_SUBFOLDER"}
export OUTPUT_DIR=${OUTPUT_DIR:-"$(pwd)/build/$PLATFORM/$DATA_SUBFOLDER"}
export EPIPHANY_DATA_DIR=${EPIPHANY_DATA_DIR:-"$(pwd)/build/$EPIPHANY_DATA_SUBFOLDER/${OUTPUT_DIR##*/}"}

# Replace values from siplified config
if [[ $EPIPHANY_SIMPLE -eq 1 ]]; then
    chmod +x $REPO_ROOT/bin/replacer
    if [ ! -f $DATA_DIR/data_defaults.yaml ]; then
        cp $DATA_DIR/data.yaml $DATA_DIR/data_defaults.yaml
    fi
    $REPO_ROOT/bin/replacer -b $DATA_DIR/data.yaml -r $REPO_ROOT/epiphany-simple-config.yaml
    echo_green "Simplified config applied."
fi

# Generate the proxy information if there is any.
$REPO_ROOT/bin/template_engine -d $REPO_ROOT/manifest.yaml -i $REPO_ROOT/$COMMON_TEMPLATES_BASE/proxy.sh.j2 -o $REPO_ROOT/proxy.sh
chmod +x $REPO_ROOT/proxy.sh
source $REPO_ROOT/proxy.sh

# Generate the data version information for display purposes only at this stage.
$REPO_ROOT/bin/template_engine -d $REPO_ROOT/manifest.yaml -i $REPO_ROOT/$COMMON_TEMPLATES_BASE/version.sh.j2 -o $REPO_ROOT/version.sh
chmod +x $REPO_ROOT/version.sh
source $REPO_ROOT/version.sh

if [[ $BUILD_SHOW_VERSION -eq 1 ]]; then
    echo_green "version: $EPIPHANY_VERSION"
    exit 0
fi

if [[ $BUILD_SHOW_LOGO -eq 1 ]]; then
    clear
    echo -e "${GREEN}"
    echo "  ______ _____ _____ _____  _    _          _   ___     __ "
    echo " |  ____|  __ \_   _|  __ \| |  | |   /\   | \ | \ \   / / "
    echo " | |__  | |__) || | | |__) | |__| |  /  \  |  \| |\ \_/ /  "
    echo " |  __| |  ___/ | | |  ___/|  __  | / /\ \ | .   | \   /   "
    echo " | |____| |    _| |_| |    | |  | |/ ____ \| |\  |  | |    "
    echo " |______|_|   |_____|_|    |_|  |_/_/    \_\_| \_|  |_|    "
    echo
    echo "            Epiphany Build version: ${EPIPHANY_VERSION}"
    echo "-----------------------------------------------------------"
    echo -e "${NC}"
else
    echo
    echo_green "====> EPIPHANY_UP being called..."
    echo_green "====> Epiphany Build version: ${EPIPHANY_VERSION}"
    echo
fi

# May want to check for dependencies before moving on

# WIP
# Build out the platform environments if they do not exist
# if [[ $BUILD_SETUP -eq 1 or ! -f $REPO_ROOT/platforms ]]; then
#     # Ask for the supported environments the user wants to support it will always default to azure
# fi

# Create data.yaml from template from given path
if [[ -v DATA_YAML_TEMPLATE_PATH ]]; then
    $REPO_ROOT/bin/template_engine -d $DATA_DIR/basic-data.yaml -i $PLATFORM_FOLDER/$DATA_YAML_TEMPLATE_PATH/data.yaml.j2 -o $DATA_DIR/data.yaml
    echo_green "====> data.yaml was generated using $DATA_DIR/basic-data.yaml and $PLATFORM_FOLDER/$DATA_YAML_TEMPLATE_PATH/data.yaml.j2"
fi

# Make sure the user knows what will happen
if [[ $EPIPHANY_AUTO_APPROVE -eq 0 ]]; then
    P=$(echo $PLATFORM | tr '[:lower:]' '[:upper:]')
    echo_purple "User: $(whoami)"
    echo
    echo_purple "Here are the values that will be used:"
    echo_purple "   Platform:                           ${PLATFORM}"
    echo_purple "   Build environment:                  ${BUILD_ENVIRONMENT}"
    echo_purple "   Epiphany Data folder:               ${EPIPHANY_DATA_DIR}"
    if [[ $PLATFORM == "azure" ]]; then
        echo_purple "   Infrastructure Data folder:         ${DATA_DIR}"
        echo_purple "   Infrastructure Data file:           ${DATA}"
        echo_purple "   Infrastructure build Output folder: ${OUTPUT_DIR}"
    fi
    echo
    echo_purple "** You are about to launch Epiphany for [[ $P ]] **"
    echo
    echo_purple "Do you wish to continue? [yes or no]: "
    
    read yno
    
    case $yno in
        [yY] | [yY][Ee][Ss] )
            echo_red "====> Agreed <===="
            echo
        ;;
        
        [nN] | [n|N][O|o] )
            echo_red "====> Not agreed, you can't proceed with Epiphany <====";
            echo
            exit 1
        ;;
        *)  echo_red "====> Invalid input. Only 'y', 'yes', 'n', 'no' allowed <===="
            echo
            exit 1
        ;;
    esac
fi

# NB: If no options were passed then simulate -b
if [[ $NO_OPTS -eq 1 ]]; then
    export BOOTSTRAP_INIT=1
    export BOOTSTRAP_INFRASTRUCUTURE=1
    export BOOTSTRAP_GET_PREREQS=1
    echo
    echo_purple "====> NO options were passed into 'epiphany' so emulating options '-b' and '-i' taking defaults ..."
    echo_purple "====> Ctrl-C now to exit or in 3 seconds build will start..."
    echo
    # Wait 3 seconds just to show the message...
    sleep 3
fi

# As new underlying platforms are added - reference them here. 'run_build.sh' should be the launching point in each platform that
# needs any sort of infrastructure built out.

# Make sure the epiphany data folder exists. Used for automated controlled platforms such as Azure, etc.
mkdir -p $EPIPHANY_DATA_DIR/data

case "$PLATFORM" in
    'aws')
        echo_purple '====> AWS build not implemented...'
    ;;
    'azure')
        echo_purple '====> Azure build starting...'
        if [[ -f $OUTPUT_DIR/env.sh ]]; then
            source $OUTPUT_DIR/env.sh
        fi
        
        # Bootstrap the infrastructure or make changes to it
        if [[ $BOOTSTRAP_INFRASTRUCUTURE -eq 1 ]]; then
            $REPO_ROOT/$AZURE_SCRIPTS_BASE/run_build.sh $DATA_DIR $OUTPUT_DIR $EPIPHANY_DATA_DIR data.yaml
        fi
    ;;
    'metal')
        echo_purple '====> Baremetal build starting...'
        cp -f $DATA_DIR/data.yaml $EPIPHANY_DATA_DIR/data/manifest.yaml
    ;;
    'vbox')
        echo_purple '====> VBox (laptop mode) build starting...'
    ;;
    'vmware')
        echo_purple '====> VMWare build starting...'
        cp -f $DATA_DIR/data.yaml $EPIPHANY_DATA_DIR/data/manifest.yaml
    ;;
    *)
        echo_red '====> Platform is not valid. Check your data and try again <===='
        echo
        exit 1
    ;;
esac

# Run Ansible epiphany build
if [[ ! -f $EPIPHANY_DATA_DIR/data/manifest.yaml ]]; then
    echo_red "====> ERROR: $EPIPHANY_DATA_DIR/data/manifest.yaml is not present and there must be a valid manifest.yaml data file."
    echo
    exit 1
fi

if [[ $BOOTSTRAP_INIT -eq 1 ]]; then
    # Create the ansible script which creates what ansible needs
    $REPO_ROOT/bin/template_engine -d $EPIPHANY_DATA_DIR/data/manifest.yaml -i $REPO_ROOT/$COMMON_TEMPLATES_BASE/ansible.sh.j2 -o $EPIPHANY_DATA_DIR/ansible.sh
    chmod +x $EPIPHANY_DATA_DIR/ansible.sh
    
    # $EPIPHANY_DATA_DIR/ansible.sh $EPIPHANY_DATA_DIR $BUILD_ENVIRONMENT
    # By changing to the ansible directory we can use the project specific ansible.cfg
    (cd $EPIPHANY_DATA_DIR && $EPIPHANY_DATA_DIR/ansible.sh $EPIPHANY_DATA_DIR $BUILD_ENVIRONMENT)
fi

# Add the information needed to access the cluster
# Maybe add to a file for referencing later
# Maybe add an option that reads from that file to the screen

echo
echo_green "====> Epiphany - Completed! <===="
echo
